variables:
  FWVERSION: "net8.0"

trigger:
  branches:
    include:
    - main
  paths:
    include:
    - '**'

jobs:

- job: Boot
  timeoutInMinutes: 2
  pool:
    vmImage: ubuntu-latest
  
  steps:
  
  - bash: |
      set -eu; set -o pipefail
      script=https://raw.githubusercontent.com/devizer/test-and-build/master/install-build-tools-bundle.sh; (wget -q -nv --no-check-certificate -O - $script 2>/dev/null || curl -ksSL $script) | bash >/dev/null
      origin="$(git config --get remote.origin.url)"
      # try-and-retry git clone https://github.com/devizer/Universe.NUnitPipeline ~/copy;
      try-and-retry git clone $origin ~/git.copy;
      commits=$(cd ~/git.copy; git log -n 999999 --date=raw --pretty=format:"%cd" | wc -l)
      COMMITS_COUNT="${commits}"
      echo "##vso[task.setvariable variable=COMMITS_COUNT;isoutput=true]$COMMITS_COUNT"
      echo "COMMITS_COUNT = [$COMMITS_COUNT]"
    name: 'Bootstrap'

- job: TestAndPack
  dependsOn:
    - Boot
  variables:
      COMMITS_COUNT: $[ dependencies.Boot.outputs['Bootstrap.COMMITS_COUNT'] ]  
  displayName: 'Pack'
  pool:
    vmImage: '$(VMIMAGE)'
  timeoutInMinutes: 8
  strategy:
    maxParallel: 10
    matrix:
      "3.10.1 Windows":
         NUNIT_VERSION: "3.10.1"
         VMIMAGE: "windows-latest"
      "3.10.1 Linux":
         NUNIT_VERSION: "3.10.1"
         VMIMAGE: "ubuntu-latest"
      "3.10.1 MacOs":
         NUNIT_VERSION: "3.10.1"
         VMIMAGE: "macos-latest"
      "3.10.0 Windows":
         NUNIT_VERSION: "3.10.0"
         VMIMAGE: "windows-latest"
      "3.10.0 Linux":
         NUNIT_VERSION: "3.10.0"
         VMIMAGE: "ubuntu-latest"
      "3.10.0 MacOs":
         NUNIT_VERSION: "3.10.0"
         VMIMAGE: "macos-latest"

      "3.7.0 Windows":
         NUNIT_VERSION: "3.7.0"
         VMIMAGE: "windows-latest"
      "3.7.0 Linux":
         NUNIT_VERSION: "3.7.0"
         VMIMAGE: "ubuntu-latest"
      "3.7.0 MacOs":
         NUNIT_VERSION: "3.7.0"
         VMIMAGE: "macos-latest"

      "4.2.2 Windows":
         NUNIT_VERSION: "4.2.2"
         VMIMAGE: "windows-latest"
      "4.2.2 Linux":
         NUNIT_VERSION: "4.2.2"
         VMIMAGE: "ubuntu-latest"
      "4.2.2 MacOs":
         NUNIT_VERSION: "4.2.2"
         VMIMAGE: "macos-latest"
      "4.2.1 Windows":
         NUNIT_VERSION: "4.2.1"
         VMIMAGE: "windows-latest"
      "4.2.1 Linux":
         NUNIT_VERSION: "4.2.1"
         VMIMAGE: "ubuntu-latest"
      "4.2.1 MacOs":
         NUNIT_VERSION: "4.2.1"
         VMIMAGE: "macos-latest"
      "4.1.0 Windows":
         NUNIT_VERSION: "4.1.0"
         VMIMAGE: "windows-latest"
      "4.1.0 Linux":
         NUNIT_VERSION: "4.1.0"
         VMIMAGE: "ubuntu-latest"
      "4.1.0 MacOs":
         NUNIT_VERSION: "4.1.0"
         VMIMAGE: "macos-latest"
      "4.0.1 Windows":
         NUNIT_VERSION: "4.0.1"
         VMIMAGE: "windows-latest"
      "4.0.1 Linux":
         NUNIT_VERSION: "4.0.1"
         VMIMAGE: "ubuntu-latest"
      "4.0.1 MacOs":
         NUNIT_VERSION: "4.0.1"
         VMIMAGE: "macos-latest"
      "3.14.0 Windows":
         NUNIT_VERSION: "3.14.0"
         VMIMAGE: "windows-latest"
      "3.14.0 Linux":
         NUNIT_VERSION: "3.14.0"
         VMIMAGE: "ubuntu-latest"
      "3.14.0 MacOs":
         NUNIT_VERSION: "3.14.0"
         VMIMAGE: "macos-latest"
      "3.13.3 Windows":
         NUNIT_VERSION: "3.13.3"
         VMIMAGE: "windows-latest"
      "3.13.3 Linux":
         NUNIT_VERSION: "3.13.3"
         VMIMAGE: "ubuntu-latest"
      "3.13.3 MacOs":
         NUNIT_VERSION: "3.13.3"
         VMIMAGE: "macos-latest"
      "3.13.2 Windows":
         NUNIT_VERSION: "3.13.2"
         VMIMAGE: "windows-latest"
      "3.13.2 Linux":
         NUNIT_VERSION: "3.13.2"
         VMIMAGE: "ubuntu-latest"
      "3.13.2 MacOs":
         NUNIT_VERSION: "3.13.2"
         VMIMAGE: "macos-latest"
      "3.13.1 Windows":
         NUNIT_VERSION: "3.13.1"
         VMIMAGE: "windows-latest"
      "3.13.1 Linux":
         NUNIT_VERSION: "3.13.1"
         VMIMAGE: "ubuntu-latest"
      "3.13.1 MacOs":
         NUNIT_VERSION: "3.13.1"
         VMIMAGE: "macos-latest"
      "3.13.0 Windows":
         NUNIT_VERSION: "3.13.0"
         VMIMAGE: "windows-latest"
      "3.13.0 Linux":
         NUNIT_VERSION: "3.13.0"
         VMIMAGE: "ubuntu-latest"
      "3.13.0 MacOs":
         NUNIT_VERSION: "3.13.0"
         VMIMAGE: "macos-latest"
      "3.12.0 Windows":
         NUNIT_VERSION: "3.12.0"
         VMIMAGE: "windows-latest"
      "3.12.0 Linux":
         NUNIT_VERSION: "3.12.0"
         VMIMAGE: "ubuntu-latest"
      "3.12.0 MacOs":
         NUNIT_VERSION: "3.12.0"
         VMIMAGE: "macos-latest"
      # "3.11.0 Windows":
      #    NUNIT_VERSION: "3.11.0"
      #    VMIMAGE: "windows-latest"
      # "3.11.0 Linux":
      #    NUNIT_VERSION: "3.11.0"
      #    VMIMAGE: "ubuntu-latest"
      # "3.11.0 MacOs":
      #    NUNIT_VERSION: "3.11.0"
      #    VMIMAGE: "macos-latest"
      "3.9.0 Windows":
         NUNIT_VERSION: "3.9.0"
         VMIMAGE: "windows-latest"
      "3.9.0 Linux":
         NUNIT_VERSION: "3.9.0"
         VMIMAGE: "ubuntu-latest"
      "3.9.0 MacOs":
         NUNIT_VERSION: "3.9.0"
         VMIMAGE: "macos-latest"
      "3.8.1 Windows":
         NUNIT_VERSION: "3.8.1"
         VMIMAGE: "windows-latest"
      "3.8.1 Linux":
         NUNIT_VERSION: "3.8.1"
         VMIMAGE: "ubuntu-latest"
      "3.8.1 MacOs":
         NUNIT_VERSION: "3.8.1"
         VMIMAGE: "macos-latest"
      "3.8.0 Windows":
         NUNIT_VERSION: "3.8.0"
         VMIMAGE: "windows-latest"
      "3.8.0 Linux":
         NUNIT_VERSION: "3.8.0"
         VMIMAGE: "ubuntu-latest"
      "3.8.0 MacOs":
         NUNIT_VERSION: "3.8.0"
         VMIMAGE: "macos-latest"
      "3.7.1 Windows":
         NUNIT_VERSION: "3.7.1"
         VMIMAGE: "windows-latest"
      "3.7.1 Linux":
         NUNIT_VERSION: "3.7.1"
         VMIMAGE: "ubuntu-latest"
      "3.7.1 MacOs":
         NUNIT_VERSION: "3.7.1"
         VMIMAGE: "macos-latest"
      # "3.6.1 Windows":
      #    NUNIT_VERSION: "3.6.1"
      #    VMIMAGE: "windows-latest"
      # "3.6.1 Linux":
      #    NUNIT_VERSION: "3.6.1"
      #    VMIMAGE: "ubuntu-latest"
      # "3.6.1 MacOs":
      #    NUNIT_VERSION: "3.6.1"
      #    VMIMAGE: "macos-latest"
      # "3.6.0 Windows":
      #    NUNIT_VERSION: "3.6.0"
      #    VMIMAGE: "windows-latest"
      # "3.6.0 Linux":
      #    NUNIT_VERSION: "3.6.0"
      #    VMIMAGE: "ubuntu-latest"
      # "3.6.0 MacOs":
      #    NUNIT_VERSION: "3.6.0"
      #    VMIMAGE: "macos-latest"
      # "3.5.0 Windows":
      #    NUNIT_VERSION: "3.5.0"
      #    VMIMAGE: "windows-latest"
      # "3.5.0 Linux":
      #    NUNIT_VERSION: "3.5.0"
      #    VMIMAGE: "ubuntu-latest"
      # "3.5.0 MacOs":
      #    NUNIT_VERSION: "3.5.0"
      #    VMIMAGE: "macos-latest"
      # "3.4.1 Windows":
      #    NUNIT_VERSION: "3.4.1"
      #    VMIMAGE: "windows-latest"
      # "3.4.1 Linux":
      #    NUNIT_VERSION: "3.4.1"
      #    VMIMAGE: "ubuntu-latest"
      # "3.4.1 MacOs":
      #    NUNIT_VERSION: "3.4.1"
      #    VMIMAGE: "macos-latest"
      # "3.4.0 Windows":
      #    NUNIT_VERSION: "3.4.0"
      #    VMIMAGE: "windows-latest"
      # "3.4.0 Linux":
      #    NUNIT_VERSION: "3.4.0"
      #    VMIMAGE: "ubuntu-latest"
      # "3.4.0 MacOs":
      #    NUNIT_VERSION: "3.4.0"
      #    VMIMAGE: "macos-latest"
      # "3.2.1 Windows":
      #    NUNIT_VERSION: "3.2.1"
      #    VMIMAGE: "windows-latest"
      # "3.2.1 Linux":
      #    NUNIT_VERSION: "3.2.1"
      #    VMIMAGE: "ubuntu-latest"
      # "3.2.1 MacOs":
      #    NUNIT_VERSION: "3.2.1"
      #    VMIMAGE: "macos-latest"
      # "3.2.0 Windows":
      #    NUNIT_VERSION: "3.2.0"
      #    VMIMAGE: "windows-latest"
      # "3.2.0 Linux":
      #    NUNIT_VERSION: "3.2.0"
      #    VMIMAGE: "ubuntu-latest"
      # "3.2.0 MacOs":
      #    NUNIT_VERSION: "3.2.0"
      #    VMIMAGE: "macos-latest"
      # "3.0.1 Windows":
      #    NUNIT_VERSION: "3.0.1"
      #    VMIMAGE: "windows-latest"
      # "3.0.1 Linux":
      #    NUNIT_VERSION: "3.0.1"
      #    VMIMAGE: "ubuntu-latest"
      # "3.0.1 MacOs":
      #    NUNIT_VERSION: "3.0.1"
      #    VMIMAGE: "macos-latest"
      # "3.0.0 Windows":
      #    NUNIT_VERSION: "3.0.0"
      #    VMIMAGE: "windows-latest"
      # "3.0.0 Linux":
      #    NUNIT_VERSION: "3.0.0"
      #    VMIMAGE: "ubuntu-latest"
      # "3.0.0 MacOs":
      #    NUNIT_VERSION: "3.0.0"
      #    VMIMAGE: "macos-latest"

  steps:

  - bash: |
      set -eu; set -o pipefail
      script=https://raw.githubusercontent.com/devizer/test-and-build/master/install-build-tools-bundle.sh; (wget -q -nv --no-check-certificate -O - $script 2>/dev/null || curl -ksSL $script) | bash >/dev/null
      Say --Reset-Stopwatch
      Say "CPU: $(Get-CpuName)"
      Say "COMMITS_COUNT: [$COMMITS_COUNT]"
      echo "uname -r: [$(uname -r)]"
      echo "uname -s: [$(uname -s)]"
      PATH_SEPARATOR_CHAR='/'
      [[ "$(uname -s)" == "MSYS"* || "$(uname -s)" == "MINGW"* ]] && PATH_SEPARATOR_CHAR='\'
      echo "##vso[task.setvariable variable=PATH_SEPARATOR_CHAR;]$PATH_SEPARATOR_CHAR"
      echo "PATH_SEPARATOR_CHAR: [$PATH_SEPARATOR_CHAR]"

      dotnet --info
    # condition: eq(variables['Agent.OS'], 'Linux')
    displayName: 'Bootstrap'

  - bash: |
      set -eu; set -o pipefail
      SELF_VERSION="${NUNIT_VERSION}.${COMMITS_COUNT}"
      echo "##vso[task.setvariable variable=SELF_VERSION;]$SELF_VERSION"
      Say "SELF_VERSION = [$SELF_VERSION]"

      . Scripts/Assign-Versions-on-Build.sh 
      echo "##vso[task.setvariable variable=TARGET_FRAMEWORKS_LIB;]$TARGET_FRAMEWORKS_LIB"
      echo "##vso[task.setvariable variable=TARGET_FRAMEWORKS_TEST;]$TARGET_FRAMEWORKS_TEST"
      Say "TARGET_FRAMEWORKS_LIB: [$TARGET_FRAMEWORKS_LIB]"
      Say "TARGET_FRAMEWORKS_TEST: [$TARGET_FRAMEWORKS_TEST]"

    # condition: eq(variables['Agent.OS'], 'Linux')
    displayName: 'Assign Self Version'


  - bash: |
      set -eu; set -o pipefail
      if [[ -n "TRUE" ]] || [[ "$(uname -s)" == Linux ]]; then
        Say "TARGET_FRAMEWORKS_LIB: [$TARGET_FRAMEWORKS_LIB]"
        Say "TARGET_FRAMEWORKS_TEST: [$TARGET_FRAMEWORKS_TEST]"

        # chcp 65001 || true
        pushd Universe.NUnitPipeline.Tests
        Reset-Target-Framework -fw "$TARGET_FRAMEWORKS_TEST" -l latest
        sed -i -E 's|<TargetFrameworks>.*</TargetFrameworks>|<TargetFrameworks>'$TARGET_FRAMEWORKS_TEST'</TargetFrameworks>|' *.csproj
        popd
        pushd Universe.NUnitPipeline
        sed -i -E 's|<TargetFrameworks>.*</TargetFrameworks>|<TargetFrameworks>'$TARGET_FRAMEWORKS_LIB'</TargetFrameworks>|' *.csproj 
        Reset-Target-Framework -fw "$TARGET_FRAMEWORKS_LIB" -l latest
        popd
      fi
      for folder in Universe.NUnitPipeline.Tests Universe.NUnitPipeline; do
        pushd $folder
        echo; echo "REMOVE NUnit"
        dotnet remove package NUnit
        echo; echo "ADD NUnit"
        dotnet add package NUnit -v $NUNIT_VERSION
        popd
      done
      for folder in Universe.NUnitPipeline.Tests Universe.NUnitPipeline; do
        pushd $folder
        Say "Project: $(ls *.csproj)"
        cat *.csproj
        popd
      done
    # condition: eq(variables['Agent.OS'], 'Linux')
    displayName: 'Assign Version and Target Frameworks'

  - bash: |
      set -eu; set -o pipefail
      pushd Universe.NUnitPipeline.Tests
      try-and-retry dotnet restore -v:q
      # msbuild /t:Build /p:Configuration=Release /verbosity:quiet Universe.NUnitPipeline.Tests.csproj
      dotnet build -c Release -verbosity:quiet Universe.NUnitPipeline.Tests.csproj 2>&1 | { grep -v ": warning"; true; }
      popd
    # condition: eq(variables['Agent.OS'], 'Linux')
    displayName: 'Build'

  - bash: |
      set -eu; set -o pipefail
      cd Universe.NUnitPipeline.Tests
      export ENABLE_ANSI_COLORS=True
      dotnet test -c Release -f $FWVERSION --filter "TestCategory !~ Fail" --logger "console;verbosity=normal;consoleLoggerParameters=ErrorsOnly" -verbosity:minimal 
    # condition: eq(variables['Agent.OS'], 'Linux')
    displayName: 'Test by dotnet test'

  - bash: |
      set -eu; set -o pipefail
      cd Scripts
      . Test-All-Targets.sh
    displayName: 'Test All the Target Frameworks'

  - bash: |
      set -eu; set -o pipefail
      Say "Packing $SELF_VERSION"
      pushd Universe.NUnitPipeline
      dotnet pack -c Release -p:PackageVersion=$SELF_VERSION -p:Version=$SELF_VERSION -p:IncludeSymbols=True -p:SymbolPackageFormat=snupkg
      popd
    condition: eq(variables['Agent.OS'], 'Linux')
    displayName: 'Pack (S)NuGet'

  - bash: |
      set -eu; set -o pipefail
      mkdir -p $HOME/nunit
      pushd $HOME/nunit
      nuget install nunit.consolerunner -version 3.18.3
      cd NUnit*; cd tools;
      export nunitexe=$(pwd)/nunit3-console.exe 
      popd
      cd Universe.NUnitPipeline.Tests
      Say "Building"
      Reset-Target-Framework -fw net8.0
      dotnet build -f net8.0 -c Release
      cd bin/Release/net8.0
      if [[ "$AGENT_OS" == "Windows_NT" ]]; then
        invoke="$nunitexe"
      else
        invoke="mono $nunitexe"
      fi
      Say "$invoke Universe.NUnitPipeline.Tests.dll, except fail"
      $invoke --where "cat != Fail" Universe.NUnitPipeline.Tests.dll

      Say "$invoke Universe.NUnitPipeline.Tests.dll, include fail, ignoring exitcode"
      $invoke Universe.NUnitPipeline.Tests.dll || true

      file="$(find . -name "*Tree.Summary.txt" | head -1)"
      cp -av "$(dirname "$file")" "$SYSTEM_ARTIFACTSDIRECTORY"
      Say "Tree Report: [$file]"
      cat "$file"
    condition: succeededOrFailed()
    displayName: 'Test by Console Runner'

  - bash: |
       set -eu; set -o pipefail
       cd "$BUILD_SOURCESDIRECTORY"
       7z a "$SYSTEM_ARTIFACTSDIRECTORY/Sources $AGENT_JOBNAME $BUILD_BUILDNUMBER.7z" -mx=5 -ms=on -mqs=on
    condition: succeededOrFailed()
    displayName: 'Deploy Sources'

  - bash: |
       for ext in nupkg snupkg; do
         find . -name "*.$ext" -exec cp -v {} $SYSTEM_ARTIFACTSDIRECTORY \;
       done
    displayName: 'Deploy Nuget Packages'

  - task: PublishBuildArtifacts@1
    condition: succeededOrFailed()
    displayName: 'Publish Patched Sources'
    inputs:
      pathtoPublish: '$(SYSTEM.ARTIFACTSDIRECTORY)'
      artifactName: 'Sources $(Agent.JobName)-$(Build.BUILDNUMBER)'


- job: 'Combine'
  variables:
      COMMITS_COUNT: $[ dependencies.Boot.outputs['Bootstrap.COMMITS_COUNT'] ]  
  condition: succeededOrFailed()
  pool:
    vmImage: 'ubuntu-latest'
  timeoutInMinutes: 15
  dependsOn:
    - TestAndPack

  steps: 

  - task: DownloadPipelineArtifact@2
    # condition: succeededOrFailed()
    displayName: 'Download of all versions'
    inputs:
      path: '$(SYSTEM.ARTIFACTSDIRECTORY)/All'
      patterns: 
        "**"

  - bash: |
       set -eu; set -o pipefail;
       toDirectory=$SYSTEM_ARTIFACTSDIRECTORY/nupkg-v.$COMMITS_COUNT
       mkdir -p $toDirectory
       for ext in nupkg snupkg; do
         find $SYSTEM_ARTIFACTSDIRECTORY/All -name "*.$ext" -exec cp -v {} $toDirectory \;
       done
    displayName: 'Arrange packages'

    
  - task: PublishBuildArtifacts@1
    condition: succeededOrFailed()
    displayName: 'Publish'
    inputs:
      pathtoPublish: '$(SYSTEM.ARTIFACTSDIRECTORY)'
      artifactName: 'Pack Combined'
